# -*- mode: ruby -*-
# vi: set ft=ruby ts=2 sw=2 et sua= inex= :

config_file = "config.ini"
options = {}
File.foreach(config_file) { |line|
  option, value = line.split("=")
  option = option.strip()
  if !value.nil?
    value = value.strip()
    options[option] = value
  end
}

# If you want to deploy your vm's in isolated particular network, you should specify environment variable:
# export VIRTUALBOX_NETWORK_NAME=test_net1
# vagrant up grizzly juno cloudferry

options['virtualbox_network_name'] = ENV['VIRTUALBOX_NETWORK_NAME'] unless ENV['VIRTUALBOX_NETWORK_NAME'].nil?

user = %x(id -un).strip()
uid = %x(id -u #{user}).strip()

nodes = {
  "grizzly#{ENV["BUILD_NAME"]}" => {
    "box" => "http://172.18.124.79:8000/precise-grizzly.box",
    "ip" => "#{options['grizzly_ip']}",
    "memory" => 2560,
    "sshport" => "#{ENV["SSH_PORT_GRIZZLY"]}",
    "role" => "openstack"
  },
  "icehouse#{ENV["BUILD_NAME"]}" => {
    "box" => "http://172.18.124.79:8000/trusty-icehouse.box",
    "ip" => "#{options['icehouse_ip']}",
    "memory" => 4096,
    "sshport" => "#{ENV["SSH_PORT_ICEHOUSE"]}",
    "role" => "openstack"
  },
  "juno#{ENV["BUILD_NAME"]}" => {
    "box" => "http://172.18.124.79:8000/juno.box",
    "ip" => "#{options['juno_ip']}",
    "memory" => 4096,
    "sshport" => "#{ENV["SSH_PORT_JUNO"]}",
    "role" => "openstack",
    "devstack" => {
      "branch" => 'stable/juno'
    }
  },
  "cloudferry#{ENV["BUILD_NAME"]}" => {
    "box" => "hashicorp/precise64",
    "ip" => "#{options['cloudferry_ip']}",
    "memory" => 1536,
    "cpus" => 1,
    "sshport" => "#{ENV["SSH_PORT_CLOUDFERRY"]}",
    "role" => "lab"
  },
  "nfs#{ENV["BUILD_NAME"]}" => {
    "box" => "http://172.18.124.79:8000/nfs.box",
    "ip" => "#{options['nfs_ip']}",
    "memory" => 256,
    "cpus" => 1,
    "sshport" => "#{ENV["SSH_PORT_NFS"]}",
    "role" => "lab"
  },
  "grizzlycompute" => {
    "box" => "openstack-user/precise-grizzlycompute",
    "ip" => "#{options['grizzly_compute_ip']}",
    "memory" => 2560,
    "role" => "openstack"
  },
  "icehousecompute" => {
    "box" => "openstack-user/precise-icehousecompute",
    "ip" => "#{options['icehouse_compute_ip']}",
    "memory" => 2560,
    "role" => "openstack"
  }
}

Vagrant.require_version '>= 1.6.0'

Vagrant.configure(2) do |config|
  config.vm.provision "shell", path: "./provision/prerequisites.sh"
  etc_hosts = nodes.map { |name, data| [data["ip"], name].join(' ') }.join("\n")
  cloudferry_repo = File.expand_path(File.join(File.dirname(__FILE__), ".."))
  ubuntu_cf_repo = cloudferry_repo.sub(ENV["HOME"], "/home/#{user}")

  nodes.each do |nodename, nodedata|
    config.vm.define nodename do |thisnode|
      if nodedata['sshport'] != "" then
        thisnode.vm.network "forwarded_port", guest: 22, host: nodedata['sshport'], id: 'ssh'
      end
      thisnode.vm.box = nodedata['box']
      thisnode.vm.hostname = nodename

      thisnode.vm.provision "shell", inline: "echo '#{etc_hosts}' >> /etc/hosts"

      case nodedata.fetch("role")
        when "openstack"
          thisnode.vm.provision "shell",
            path: "./provision/keys.sh",
            args: [ "--public-key", File.read("#{ENV["HOME"]}/#{options['public_key_path']}").strip() ]
          thisnode.vm.provision "shell",
            path: "./provision/keys.sh",
            args: [ "--public-key", File.read("provision/cf_keys/id_rsa.pub").strip() ] unless not File.exist?("provision/cf_keys/id_rsa.pub")
          if nodedata.has_key?('devstack')
            thisnode.vm.provision "file",
              source: "./provision/devstack/local_juno.conf",
              destination: "/tmp/local.conf"
            thisnode.vm.provision "shell",
              privileged: false,
              path: "./provision/devstack/devstack.sh",
              args: [ "--branch", "#{nodedata['devstack']['branch']}" ]
          end
          thisnode.vm.provision "shell", path: "./provision/libvirt.sh"
          if nodename == "grizzly" then
            thisnode.vm.provision "shell", path: "./provision/fix_interfaces.sh"
            thisnode.vm.provision "shell", path: "./provision/qemu.sh"
          elsif nodename == "icehouse" then
            thisnode.vm.provision "shell", path: "./provision/fix_interfaces.sh"
            thisnode.vm.provision "shell", path: "./provision/cleanup_nova_instances.sh"
          end
        when "dev"
          thisnode.vm.provision "shell",
            path: "./provision/user.sh",
            args: [ "--user", user, "--uid", uid ]
          thisnode.vm.synced_folder ENV["HOME"], "/home/#{user}", type: "nfs"
          thisnode.vm.provision "shell",
            path: "./provision/cloudferry.sh",
            args: [ "--cloudferry-path", ubuntu_cf_repo,
                    "--user", user ]
          thisnode.vm.provision "shell",
            path: "./provision/generate_config.sh",
            args: [ "--cloudferry-path", ubuntu_cf_repo ]
        when "lab"
          thisnode.vm.provision "shell",
            path: "./provision/keys.sh",
            args: [ "--public-key", File.read("#{ENV["HOME"]}/#{options['public_key_path']}").strip() ]
          thisnode.vm.provision "shell",
            path: "./provision/pythoncrypto.sh"
          thisnode.vm.provision "file",
            source: "./provision/cf_keys/id_rsa", 
            destination: "/home/vagrant/.ssh/id_rsa" unless not File.exist?("provision/cf_keys/id_rsa")
          thisnode.vm.provision "file",
            source: "./provision/cf_keys/id_rsa.pub", 
            destination: "/home/vagrant/.ssh/id_rsa.pub" unless not File.exist?("provision/cf_keys/id_rsa.pub")
      end

      if nodedata.has_key?("ip") then
        thisnode.vm.network "private_network", ip: nodedata['ip'],
          virtualbox__intnet: options['virtualbox_network_name']
      end
      if nodename.start_with?("icehouse-cf-") then
        thisnode.vm.provision "shell",
          path: "./provision/restart_nova_neutron.sh"
      end

      thisnode.vm.provider "virtualbox" do |v|
        v.memory = nodedata.fetch("memory", 1024)
        v.cpus = nodedata.fetch("cpus", 2)
        v.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
        v.customize ["modifyvm", :id, "--cpuexecutioncap", "80"]
      end
    end
  end
end
